# /* ******************************************************************** */
# /* # This file was generated by a call to 'CTUtemplate::CTUtemplate()'. */
# /* Study:1052 PROAKTIV                                                  */
# /* Purpose: Data preparation                                            */
# /* Author: Alan Haynes                                                  */
# /* Date created: 2022-02-28                                             */
# /* Last update:                                                         */
# /* ******************************************************************** */





mykeep()

if(FALSE){
  # Load data
  token <- readLines("E:/tokens/1052.txt")

  api_url <- 'https://redcap.ctu.unibe.ch/api/'

  meta_sheets <- c("metadata", "event", "formEventMapping")
  meta <- map(meta_sheets,
            function(x){
              print(x)
              req <- httr2::request("https://redcap.ctu.unibe.ch/api/") %>%
                httr2::req_headers() %>%
                httr2::req_body_form(list(token = token,
                                          content = x,
                                          format = "csv"))
              resp <- req %>% httr2::req_perform()
              read.csv(textConnection(resp %>% httr2::resp_body_string()))
            })
  names(meta) <- meta_sheets
  db_sheets <- unique(meta$formEventMapping$form)

  # remove special characters for dataMaid
  # Encoding(meta$metadata$field_label) <- "UTF8"
  # meta$metadata$select_choices_or_calculations <- gsub("ä", "ae", meta$metadata$select_choices_or_calculations)
  # meta$metadata$select_choices_or_calculations <- gsub("ö", "oe", meta$metadata$select_choices_or_calculations)
  # meta$metadata$select_choices_or_calculations <- gsub("ü", "ue", meta$metadata$select_choices_or_calculations)

  db <- map(db_sheets,
            function(x){
              print(x)

              events <- meta$formEventMapping %>%
                          filter(form == x) %>% pull(unique_event_name) %>%
                          paste0(.data, collapse = ",")

              fields <- meta$metadata %>%
                          filter(form_name == x | field_name %in% c("record_id", "redcap_event_name")) %>%
                          pull(field_name) %>%
                          paste0(.data, collapse = ",")

              req <- httr2::request("https://redcap.ctu.unibe.ch/api/") %>%
                httr2::req_headers() %>%
                httr2::req_body_form(list(token = token,
                                          content = "record",
                                          forms = x,
                                          # forms = "patient_survey_fup_bimonthly",
                                          events = events,
                                          # events = "followup_3_arm_1",
                                          fields = paste0("record_id", "redcap_event_name", fields, collapse = ","),
                                          format = "csv"
                                          , 'fields[0]' = "record_id"
                                          ))
              resp <- req %>% httr2::req_perform()
              if(resp_status(resp) == 200){
                body <- resp %>% httr2::resp_body_string()
                if(nchar(body) > 1){
                  return(read.csv(textConnection(body)))
                }
              }
            })
  names(db) <- db_sheets

  # record_data <- httr2::request("https://redcap.ctu.unibe.ch/api/") %>%
  #   httr2::req_headers() %>%
  #   httr2::req_body_form(list(token = token,
  #                             content = "record",
  #                             format = "csv")) %>%
  #   httr2::req_perform() %>%
  #   httr2::resp_body_string() %>%
  #   textConnection() %>%
  #   read.csv()
  #
  # db1 <- map(db_sheets, function(x){
  #   n <- names(db[[x]])
  #   e <- meta$formEventMapping %>%
  #     filter(form == x) %>% pull(unique_event_name)
  #   record_data %>%
  #     select(record_id, redcap_event_name, redcap_repeat_instrument, redcap_repeat_instance, all_of(n)) %>%
  #     filter(redcap_event_name %in% e)
  # })
  # names(db1) <- db_sheets


  # source(paths$rs("1052PROAKTIV_R_2022-02-28_1512.r"))

  # View(db2$patient_eligibility)

  # View(rc_prep(db1$screening_form, meta$metadata))

  # db <- lapply(db, function(x) x %>%
  #                discard(~all(is.na(.) | . =="")))
  lapply(db_sheets, function(x){
    write.csv(db[[x]], paths$od(paste0("raw-", x, "-", Sys.Date(), ".csv")))
  })
  # write.csv(data, paths$od(paste0("raw_data_", Sys.Date(), ".csv")))

  # split by event
  # events <- unique(data$redcap_event_name)
  # datlist <- map(events,
  #                function(x){
  #                  data %>%
  #                    filter(redcap_event_name == x) %>%
  #                    discard(~all(is.na(.) | . ==""))
  #                  })
  # names(datlist) <- events
  # sapply(datlist, nrow)
  # sapply(datlist, ncol)

  saveRDS(db, paths$pd("db"))
  saveRDS(meta, paths$pd("meta"))
}

db <- readRDS(paths$pd("db"))
meta <- readRDS(paths$pd("meta"))

db2 <- map(names(db), function(x){
  # data <- db1[[x]]
  # source(paths$rs("1052PROAKTIV_R_2022-02-28_1512.r"))
  # return(data)
  print(x)
  d <- db[[x]]

  # remove user missings
  d[d == -999] <- NA

  # remove 'trifft nicht zu'
  m <- meta$metadata %>%
    filter(str_detect(select_choices_or_calculations, "77,") & field_type == "radio") %>%
    filter(form_name == x)

  if(length(d) > 0) d <- rc_prep(d, meta$metadata)
  if(nrow(m) > 0){
    d <- d %>%
      mutate(across(m$field_name,
                    ~ case_when(.x == 77 ~ NA_integer_,
                                TRUE ~ .x)))
  }

  d
})
names(db2) <- names(db)

saveRDS(db2, paths$pd("db2"))

# Death data from IDSC ----

death_dat <- read_xlsx(paths$od("resultIDSC_without2errors.xlsx"))
death_dat <- mutate(death_dat,
                    death_date = as.Date(as.numeric(Todesdatum), origin = "1899-12-30"),
                    record_id = StudieID) %>%
  select(record_id, death_date)

saveRDS(death_dat, paths$tmp("deathdata"))

# protocol deviations ----
sapply(db2, nrow)

pat_single <- left_join(db2$screening_form %>%
                          select(-starts_with("redcap")),
                        db2$patient_eligibility %>%
                          select(-starts_with("redcap")), by = "record_id") %>%
  left_join(db2$patient_survey_bs %>%
              select(-starts_with("redcap")), by = "record_id")



# Exclusions
pat_single <- pat_single %>%
  rowwise() %>%
  # prior intensive MPD use
  mutate(prior_mpd_use = max(sc_mpd_involv___1, sc_mpd_involv___2)) %>%
  # exclude if no IC
  filter(ic == 1) %>%
  # exclude if prior intensive MPD use
  filter(!(sc_mpd_supp_yn == 0 & prior_mpd_use == 1)) %>%
  ungroup() %>%

# grouping variable ----

# pat_single <- pat_single %>%
  mutate(
    trt = case_when(
      # new MPD registration and no prior intensive MPD use
      sc_mpd_new_yn == 1 & prior_mpd_use == 0 ~ "Intervention",
      TRUE ~ "Control"),
    trt = case_when(ic10_sphc_nelig == 1 ~ "Control",
                    TRUE ~ trt)
    # cntrol = case_when(
    #   # prior SPITEX support/new SPITEX reg. & no new MPD reg
    #   (sc_spit_supp_yn == 1 | sc_spit_new_yn == 1) & sc_mpd_new_yn != 0 ~ "Control",
    #   TRUE ~ "Intervention"),
    # single statement?
    # grp = case_when(sc_mpd_new_yn == 1 & prior_mpd_use == 0 & sc_spit_supp_yn == 0 ~ "Intervention",
    #                 TRUE ~ "Control")
    ) %>%
  # filter(record_id %in% c(29, 32, 43, 45, 52, 53)) %>%
  # select(record_id, trt, ic10_sphc_nelig) %>% View()
  # count(trt)

# pat_single %>%
#   select(sc_mpd_involv___1, sc_mpd_involv___2, sc_mpd_involv___3, sc_mpd_new_yn, sc_spit_supp_yn, sc_spit_new_yn) %>% View()

# calculate scores ----

# pat_single <- pat_single %>%
  # mutate(across(matches("pbs_sat_[:alpha:]{1}_factor$"),
  #               ~ fct_collapse(.x,
  #                              "Sehr zufrieden" = "Sehr zufrieden",
  #                              "Zufrieden" = "Zufrieden",
  #                              "Neutral" = "Neutral",
  #                              "Unzufrieden" = "Unzufrieden",
  #                              "Sehr un-zufrieden" = "Sehr un-zufrieden")),
  #        across(c(matches("pbs_stat_[abcdefghijklmn]_factor$"),
  #                 matches("pbs_sat_[:alpha:]{1}_factor$"),
  #                 matches("pbs_hcp_[[:alpha:]_]+_factor$"),
  #                 pbs_care_factor:pbs_day_imp_factor), as.numeric,
  #        .names = "{sub('_factor', '', .col)}"),
  #        # across(matches("_sat_"), function(x) case_when(x == 77 ~ 0, TRUE ~ x))
  #        ) %>% # count(pbs_sat_a)
  # select(pbs_care:pbs_day_imp) %>% summary
  rowwise() %>%
  mutate(
  ## FACITPAL-14 ----
    pbs_stat_mean = mean(c_across(matches("pbs_stat_[abcdefghijklmn]$"))),
  ## FAMCARE ----
    pbs_sat_mean = mean(c_across(matches("pbs_sat_[:alpha:]{1}$"))),
  ## HCP ----
    pbs_hcp_gp_mean = mean(c_across(matches("pbs_hcp_[[:alpha:]_]+_gp$"))),
    pbs_hcp_sp_mean = mean(c_across(matches("pbs_hcp_[[:alpha:]_]+_sp$"))),
    pbs_hcp_mpd_mean = mean(c_across(matches("pbs_hcp_[[:alpha:]_]+_mpd$"))),
  ## Sense of security ----
  # [199] "pbs_care"                       "pbs_promise"                    "pbs_comp"
  # [202] "pbs_empath"                     "pbs_need"                       "pbs_ernest"
  # [205] "pbs_codetermine"                "pbs_smooth"                     "pbs_daily"
  # [208] "pbs_incharge"                   "pbs_expect"                     "pbs_choice"
  # [211] "pbs_home"                       "pbs_1self"                      "pbs_day_imp"
    pbs_security_overall = mean(c_across(pbs_care:pbs_day_imp)),
    pbs_security_care_int = mean(c_across(pbs_care:pbs_smooth)),
    pbs_security_mastery = mean(c(pbs_daily, pbs_incharge_factor, pbs_expect)),
    pbs_security_identity = mean(c_across(pbs_choice:pbs_day_imp)),
  ) %>% #select(pbs_care:pbs_day_imp) %>% summary
  ungroup() %>%
  labelled::set_variable_labels(
    pbs_stat_mean = "Functional Assessment of Chronic Illness Therapy-Palliative (FACIT-PAL14) summary score",
    pbs_sat_mean = "Satisfaction with health care (Modified FAMCARE Scale P16)",
    pbs_hcp_gp_mean = "The Human Connection Scale for GP",
    pbs_hcp_sp_mean = "The Human Connection Scale for SPITEX",
    pbs_hcp_mpd_mean = "The Human Connection Scale for MPD",
    pbs_security_overall = "Sense of security (Overall)",
    pbs_security_care_int = "Sense of security (Care interaction)",
    pbs_security_mastery = "Sense of security (Mastery)",
    pbs_security_identity = "Sense of security (Identity)",
    pbs_ecog_factor = "Leistungsfähigkeit in letzten 2 Monaten",
    pbs_qol_factor = "Einschätzung zu Ihrer Lebensqualität"
  )

# # listing for maud
# pat_single %>% select(record_id, trt, ic, sc_mpd_supp_yn, prior_mpd_use, sc_mpd_new_yn, prior_mpd_use, ic10_sphc_nelig) %>%
#   writexl::write_xlsx("trt_groups.xlsx")

saveRDS(pat_single, paths$tmp("pat_single"))


selector <- function(x, ...){
  x %>%
    select(record_id, redcap_event_name,
           date_date, care:day_imp, ...,
           matches("secu_yes[[:digit:]]{1,2}_factor"),
           )
}


security_long <- db2$patient_survey_bs %>%
  rename_with(function(x)sub("^pbs_", "", x)) %>%
  selector(ecog, contains("ecog_factor")) %>%
  bind_rows(db2$patient_survey_fup_2weeks %>%
              rename_with(function(x)sub("^pfu1_", "", x)) %>%
              selector(ecog, contains("ecog_factor"))) %>%
  bind_rows(db2$patient_survey_fup_bimonthly %>%
              rename_with(function(x)sub("^pfu2_", "", x)) %>%
              selector(ecog, contains("ecog_factor"))) %>%
  filter(record_id %in% pat_single$record_id) %>%
  # mutate(across(c(care_factor:day_imp_factor), as.numeric,
  #               .names = "{sub('_factor', '', .col)}")) %>%
  inner_join(pat_single %>%
              select(record_id, pbs_date_date, trt)) %>% # select(care:day_imp) %>% summary
  rowwise() %>%
  ## FACITPAL-14 ----
  mutate(security_overall = mean(c_across(care:day_imp)),
         security_care_int = mean(c_across(care:smooth)),
         security_mastery = mean(c_across(c(daily, incharge, expect))),
         security_identity = mean(c_across(choice:day_imp)),
         days = as.numeric(difftime(date_date, pbs_date_date, units = "days")),
         cutdays = cut(days, breaks = c(-1, 1, 7, 21, 49, 63, Inf))
  ) %>%
    ungroup() %>%
  labelled::set_variable_labels(
    security_overall = "Sense of security (Overall)",
    security_care_int = "Sense of security (Care interaction)",
    security_mastery = "Sense of security (Mastery)",
    security_identity = "Sense of security (Identity)",

    secu_yes1_factor = "Sicherheit in Leben",
    secu_yes2_factor = "Sicherheit in Familie",
    secu_yes3_factor = "Sicherheit in Freunde",
    secu_yes4_factor = "Sicherheit in gutes Betreuungsnetz",
    secu_yes5_factor = "Sicherheit in Hausarzt",
    secu_yes6_factor = "Sicherheit in Pflegedienst/SPITEX",
    secu_yes7_factor = "Sicherheit in MPD, SEOP usw.",
    secu_yes88_factor = "Sicherheit in Andere",

    ecog_factor = "ECOG"
  )

saveRDS(security_long, paths$tmp("security_long"))


# Timepoint for ECOG >= 3 ----
sapply(db2, function(x) "pbs_ecog" %in% names(x))
table(db2$patient_survey_bs$pbs_ecog, useNA = "ifany")
sapply(db2, function(x) "pfu1_ecog" %in% names(x))
table(db2$patient_survey_fup_2weeks$pfu1_ecog, useNA = "ifany")
sapply(db2, function(x) "pfu2_ecog" %in% names(x))
table(db2$patient_survey_fup_bimonthly$pfu2_ecog, useNA = "ifany")


ecog_dat <- security_long %>%
  full_join(death_dat) %>%
  mutate(ecog_ge3 = ecog >= 3,
         before_death = date_date <= death_date
         )

main_endpoints <- ecog_dat %>%
  group_by(record_id) %>%
  # select(starts_with("security"))
  mutate(
    across(starts_with("security"),
           ~ case_when(ecog_ge3 ~ .x),
           .names = "{.col}_ecog_ge3"),
    ecog_ge3_date = case_when(ecog_ge3 ~ date_date),
    death = !is.na(death_date)
         ) %>%
  summarise(
    ecog_ge3_date = min(ecog_ge3_date, na.rm = TRUE),
    across(ends_with("_ecog_ge3"), ~ first(na.omit(.x))),
    across(matches("security_[[:alnum:]_]{7,8}$"), ~ last(na.omit(.x)), .names = "{.col}_last"),
    death = max(death)
    ) %>%
  mutate(
    security_overall_end = case_when(!is.na(security_overall_ecog_ge3) ~ security_overall_ecog_ge3,
                                     death == 1 ~ security_overall_last),
    security_care_int_end = case_when(!is.na(security_care_int_ecog_ge3) ~ security_care_int_ecog_ge3,
                                     death == 1 ~ security_care_int_last),
    security_mastery_end = case_when(!is.na(security_mastery_ecog_ge3) ~ security_mastery_ecog_ge3,
                                     death == 1 ~ security_mastery_last),
    security_identity_end = case_when(!is.na(security_identity_ecog_ge3) ~ security_identity_ecog_ge3,
                                     death == 1 ~ security_identity_last),
  ) %>%
  inner_join(pat_single %>% select(record_id, trt)) %>%
  labelled::set_variable_labels(
    security_overall_end = "Security (Overall)",
    security_care_int_end = "Security (Care interaction)",
    security_mastery_end = "Security (Mastery)",
    security_identity_end = "Security (Identity)",
                                )

saveRDS(main_endpoints, paths$tmp("main_endpoints"))

# # dates after death
# ecog_dat %>%
#   filter(date_date > death_date)
#
# tmp <- lapply(names(db2), function(x){
#   tmp <- db2[[x]]
#   if(length(tmp) > 0){
#     tmp %>%
#       left_join(death_dat) %>%
#       mutate(across(where(lubridate::is.Date), ~ .x > death_date, .names = "{.col}__XX")) %>%
#       select(record_id, where(lubridate::is.Date), ends_with("__xx"), -death_date__XX) %>%
#       rowwise() %>%
#       mutate(any_after_death = any(c_across(ends_with("__xx")), na.rm = TRUE)) %>%
#       filter(any_after_death)
#   }
# })
# names(tmp) <- names(db2)
#
# writexl::write_xlsx(tmp[-13], "dates_after_death.xlsx")


ecog_dat %>%
  select(-redcap_event_name) %>%
  pivot_wider(values_from = "ecog", names_from = tpt) %>%
  left_join(db2$end_of_study %>%
              select(complete_yn, non_comp_reason_factor, non_comp_reason_sp, record_id)) %>%
  View()

ecog_dat %>%
  group_by(record_id) %>%
  mutate(tpt2 = case_when(ecog >= 3 ~ tpt)) %>%
  dplyr::summarize(n = dplyr::n(),
                   endpoint = any(ecog >= 3),
                   tpt = min(tpt2, na.rm= TRUE)) %>%
  View()



db2$end_of_study %>%
  select(non_comp_reason_factor, non_comp_reason_sp, complete_yn) %>%
  View()

db2$pre_followup_contact_form$pre_patlive_yn %>% length


# caregivers ----

cg_dat <- db2$caregiver_eligibility %>%
  left_join(db2$caregiver_bs) %>%
  # remove CGs without included participants
  left_join(pat_single %>%
              select(record_id, trt)) %>%
  # mutate(across(matches("cgbs_sat_[:alpha:]{1}_factor$"),
  #               ~ fct_collapse(.x,
  #                              "Sehr un-zufrieden" = "Sehr un-zufrieden",
  #                              "Unzufrieden" = "Unzufrieden",
  #                              "Neutral" = "Neutral",
  #                              "Zufrieden" = "Zufrieden",
  #                              "Sehr zufrieden" = "Sehr zufrieden")),
  #        across(c(matches("cgbs_stat_[abcdefghijklmnopq]_factor$"),
  #                 cgbs_care_factor:cgbs_qol_factor,
  #                 matches("cgbs_sat_[:alpha:]{1}_factor$")), as.numeric,
  #               .names = "{sub('_factor', '_factornum', .col)}"),
  #        ) %>% #names()
  # pull(cgbs_sat_a)
  # mutate(
  #   cgbs_sat_a2 = case_when(cgbs_sat_a == 77 ~ 0, cgbs_sat_a == -999 ~ 0, TRUE ~ cgbs_sat_a)
  #        # across(matches("_sat_"), ~ case_when(.x == 77 ~ 0, .x == -999 ~ 0, TRUE ~ .x))
  #        ) %>%
  select(-matches("cgbs_sat_[:alpha:]{1}$")) %>% #names
  bind_cols(db2$caregiver_eligibility %>%
              select(matches("cgbs_sat_[:alpha:]{1}$")) %>%
              mutate(across(.fns = ~ replace(.x, .x == -999, NA)))) %>%
  # remove CGs without IC
  filter(cgic == 1) %>%
  filter(record_id %in% pat_single$record_id) %>%
  # select(cgbs_care:cgbs_qol) %>% summary
  rowwise() %>%
  mutate(
       ## FAMCARE ----
       cgbs_sat_mean = mean(c_across(matches("cgbs_sat_[:alpha:]{1}$")), na.rm = TRUE),
       ## security ----
       cgbs_security_overall = mean(c_across(cgbs_care:cgbs_qol), na.rm = TRUE),
       cgbs_security_care_int = mean(c_across(cgbs_care:cgbs_smooth), na.rm = TRUE),
       cgbs_security_mastery = mean(c(cgbs_daily, cgbs_incharge_factor, cgbs_expect), na.rm = TRUE),
       cgbs_security_identity = mean(c_across(cgbs_choice:cgbs_qol), na.rm = TRUE)
       ) %>%
  ungroup() %>%
  labelled::set_variable_labels(
    cgbs_sat_mean = "Family caregivers' satisfaction with health care (FAMCARE-2)",
    cgbs_security_overall = "Sense of security (Overall)",
    cgbs_security_care_int = "Sense of security (Care interaction)",
    cgbs_security_mastery = "Sense of security (Mastery)",
    cgbs_security_identity = "Sense of security (Identity)",
    cgbs_qol_cg = "Einschätzung zu Ihrer Lebensqualität"
  ) %>%
  left_join(pat_single %>%
              select(record_id, trt))

cg_security_long <- db2$caregiver_bs %>%
  rename_with(function(x)sub("^cgbs_", "", x)) %>%
  selector(qol, qol_factor) %>%
  bind_rows(db2$caregiver_fup_2weeks %>%
              rename_with(function(x)sub("^cgfu1_", "", x)) %>%
              selector(qol, qol_factor),
            db2$caregiver_fup_bimonthly %>%
              rename_with(function(x)sub("^cgfu2_", "", x)) %>%
              selector(qol, qol_factor)
            ) %>%
  filter(record_id %in% pat_single$record_id) %>%
  filter(!is.na(date_date)) %>%
  left_join(pat_single %>%
              select(record_id, trt)) %>%
  left_join(db2$caregiver_bs %>%
              select(record_id, cgbs_date_date)) %>%
  rowwise() %>%
  mutate(
    # across(c(care_factor:qol_factor), as.numeric,
    #        .names = "{sub('_factor', '', .col)}"),
    ## security ----
    security_overall = mean(c_across(care:qol)),
    security_care_int = mean(c_across(care:smooth)),
    security_mastery = mean(c(daily, incharge, expect)),
    security_identity = mean(c_across(choice:qol)),
    days = as.numeric(difftime(date_date, cgbs_date_date, units = "days")),
    cutdays = cut(days, breaks = c(-1, 1, 7, 21, 49, 63, Inf))
  ) %>%
  ungroup() %>%
  labelled::set_variable_labels(
    security_overall = "Sense of security (Overall)",
    security_care_int = "Sense of security (Care interaction)",
    security_mastery = "Sense of security (Mastery)",
    security_identity = "Sense of security (Identity)",

    secu_yes1_factor = "Sicherheit in Leben",
    secu_yes2_factor = "Sicherheit in Familie",
    secu_yes3_factor = "Sicherheit in Freunde",
    secu_yes4_factor = "Sicherheit in gutes Betreuungsnetz",
    secu_yes5_factor = "Sicherheit in Hausarzt",
    secu_yes6_factor = "Sicherheit in Pflegedienst/SPITEX",
    secu_yes7_factor = "Sicherheit in MPD, SEOP usw.",
    secu_yes88_factor = "Sicherheit in Andere",
  )

saveRDS(cg_dat, paths$tmp("cg_dat"))
saveRDS(cg_security_long, paths$tmp("cg_security_long"))


# save prepped data
# saveRDS(prepped_data, paths$pd("prepped_data"))

# clear the working space
mykeep()

